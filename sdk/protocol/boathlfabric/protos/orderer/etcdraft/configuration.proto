/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

option go_package = "github.com/hyperledger/fabric/protos/orderer/etcdraft";
option java_package = "org.hyperledger.fabric.protos.orderer.etcdraft";

package etcdraft;

// Metadata is serialized and set as the value of ConsensusType.Metadata in
// a channel configuration when the ConsensusType.Type is set "etcdraft".
message Metadata {
    repeated Consenter consenters = 1;
    Options options = 2;
}

// Consenter represents a consenting node (i.e. replica).
message Consenter {
    string host = 1;
    uint32 port = 2;
    bytes client_tls_cert = 3;
    bytes server_tls_cert = 4;
}

// Options to be specified for all the etcd/raft nodes. These can be modified on a
// per-channel basis.
message Options {
	uint64 tick_interval = 1; // specified in miliseconds
	uint32 election_tick = 2;
	uint32 heartbeat_tick = 3;
	uint32 max_inflight_msgs = 4;
	uint64 max_size_per_msg = 5;
	uint64 snapshot_interval = 6; // take snapshot every n blocks
}

// RaftMetadata stores data used by the Raft OSNs when
// coordinating with each other, to be serialized into
// block meta dta field and used after failres and restarts.
message RaftMetadata {
    // Maintains a mapping between the cluster's OSNs
    // and their Raft IDs.
    map<uint64, Consenter> consenters = 1;
    // Carries the Raft ID value that will be assigned
    // to the next OSN that will join this cluster.
    uint64 next_consenter_id = 2;
    // Raft cluster configurations count
    uint64 conf_change_counts = 3;
    // Index of etcd/raft entry for current block.
    uint64 raft_index = 4;
}
