/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: common/ledger.proto */

#ifndef PROTOBUF_C_common_2fledger_2eproto__INCLUDED
#define PROTOBUF_C_common_2fledger_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Common__BlockchainInfo Common__BlockchainInfo;


/* --- enums --- */


/* --- messages --- */

/*
 * Contains information about the blockchain ledger such as height, current
 * block hash, and previous block hash.
 */
struct  _Common__BlockchainInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_height;
  uint64_t height;
  protobuf_c_boolean has_currentblockhash;
  ProtobufCBinaryData currentblockhash;
  protobuf_c_boolean has_previousblockhash;
  ProtobufCBinaryData previousblockhash;
};
#define COMMON__BLOCKCHAIN_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&common__blockchain_info__descriptor) \
    , 0,0, 0,{0,NULL}, 0,{0,NULL} }


/* Common__BlockchainInfo methods */
void   common__blockchain_info__init
                     (Common__BlockchainInfo         *message);
size_t common__blockchain_info__get_packed_size
                     (const Common__BlockchainInfo   *message);
size_t common__blockchain_info__pack
                     (const Common__BlockchainInfo   *message,
                      uint8_t             *out);
size_t common__blockchain_info__pack_to_buffer
                     (const Common__BlockchainInfo   *message,
                      ProtobufCBuffer     *buffer);
Common__BlockchainInfo *
       common__blockchain_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   common__blockchain_info__free_unpacked
                     (Common__BlockchainInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Common__BlockchainInfo_Closure)
                 (const Common__BlockchainInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor common__blockchain_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_common_2fledger_2eproto__INCLUDED */
